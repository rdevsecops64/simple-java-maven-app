pipeline {
  agent any
  tools { 
        maven 'Maven_3_8_6'  
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
        stage('CompileandRunSonarAnalysis') {
            steps {
        sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=jenkins-sonar-ci_simple-java-maven-app -Dsonar.organization=jenkins-sonar-ci -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=6b97f056496f86ba20857ab4349e4ae20fd980a1'        	
		  }     
        }
        stage('Publish to Artifactory') {
  steps {
        script {
            def server = Artifactory.server 'artifactory' 
            def buildInfo = Artifactory.newBuildInfo()
            def uploadSpec = """{
                "files": [
                    {
                        "pattern": "target/*.jar", 
                        "target": "default-generic-local" 
                    }
                ]
            }"""
            server.upload(uploadSpec,buildInfo)
            buildInfo.env.capture = true
            server.publishBuildInfo buildInfo
        }
    } 
        }  
        stage('Xray Scan') {
            steps {
                script {
                    def server = Artifactory.server('artifactory')
                    def scanConfig = [
		    'buildInfo.name' = 'buildName',
                    'buildInfo.number' = 'buildNumber',
                    failBuild : false
                    ]
                    
                    def scanResults = server.xrayScan(scanConfig)
                    echo scanResults as String
                    sleep 10
                    

                }
            }
        }   	    
    }
}
